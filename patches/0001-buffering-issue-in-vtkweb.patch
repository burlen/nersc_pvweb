From be36e27e223a864f7e11ca280fcb7ec26ff0262e Mon Sep 17 00:00:00 2001
From: Burlen Loring <bloring@lbl.gov>
Date: Wed, 4 Feb 2015 13:39:46 -0800
Subject: [PATCH 1/2] buffering issue in vtkweb

the ready_line from the launched application is sent through
stdout which can be arbitrarily buffered in a pipe. the vtkpython
interpreter overrides sys.stdout (and others) and did not implement
flush. This patch implements flush and uses it to flush the ready_line
rather then send a bunch of data to the stream and hope that it is
enough to flush the buffer.
---
 Utilities/PythonInterpreter/vtkPythonInterpreter.cxx | 2 ++
 Web/Python/vtk/web/server.py                         | 5 +++--
 2 files changed, 5 insertions(+), 2 deletions(-)

diff --git a/Utilities/PythonInterpreter/vtkPythonInterpreter.cxx b/Utilities/PythonInterpreter/vtkPythonInterpreter.cxx
index 67b199b..60dbfa4 100644
--- a/Utilities/PythonInterpreter/vtkPythonInterpreter.cxx
+++ b/Utilities/PythonInterpreter/vtkPythonInterpreter.cxx
@@ -260,6 +260,7 @@ void vtkPythonInterpreter::WriteStdOut(const char* txt)
 //----------------------------------------------------------------------------
 void vtkPythonInterpreter::FlushStdOut()
 {
+    cout.flush();
 }
 
 //----------------------------------------------------------------------------
@@ -272,6 +273,7 @@ void vtkPythonInterpreter::WriteStdErr(const char* txt)
 //----------------------------------------------------------------------------
 void vtkPythonInterpreter::FlushStdErr()
 {
+    cerr.flush();
 }
 
 //----------------------------------------------------------------------------
diff --git a/Web/Python/vtk/web/server.py b/Web/Python/vtk/web/server.py
index b262384..c55a849 100644
--- a/Web/Python/vtk/web/server.py
+++ b/Web/Python/vtk/web/server.py
@@ -220,8 +220,9 @@ def start_webserver(options, protocol=vtk_wamp.ServerProtocol, disableLogging=Fa
     # wait for "Start factory" to know that the WebServer
     # is running.
     if options.forceFlush :
-        for i in range(200):
-            log.msg("+"*80, logLevel=logging.CRITICAL)
+        sys.stdout.flush()
+        #for i in range(200):
+        #    log.msg("+"*80, logLevel=logging.CRITICAL)
 
     # Give test client a chance to initialize a thread for itself
     # testing.initialize(opts=options)
-- 
1.7.12.4

